// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	repository "github.com/natanaelrusli/library-api-gin/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// Transactioner is an autogenerated mock type for the Transactioner type
type Transactioner struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields:
func (_m *Transactioner) BeginTx() (repository.Transactioner, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 repository.Transactioner
	var r1 error
	if rf, ok := ret.Get(0).(func() (repository.Transactioner, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() repository.Transactioner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Transactioner)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BookRepository provides a mock function with given fields:
func (_m *Transactioner) BookRepository() repository.BookRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BookRepository")
	}

	var r0 repository.BookRepository
	if rf, ok := ret.Get(0).(func() repository.BookRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.BookRepository)
		}
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *Transactioner) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rollback provides a mock function with given fields:
func (_m *Transactioner) Rollback() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransactioner creates a new instance of Transactioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactioner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transactioner {
	mock := &Transactioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
