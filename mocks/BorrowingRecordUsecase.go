// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/natanaelrusli/library-api-gin/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// BorrowingRecordUsecase is an autogenerated mock type for the BorrowingRecordUsecase type
type BorrowingRecordUsecase struct {
	mock.Mock
}

// CreateRecord provides a mock function with given fields: ctx, userId, bookId, status
func (_m *BorrowingRecordUsecase) CreateRecord(ctx context.Context, userId int, bookId int, status string) (domain.BorrowingRecord, error) {
	ret := _m.Called(ctx, userId, bookId, status)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecord")
	}

	var r0 domain.BorrowingRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) (domain.BorrowingRecord, error)); ok {
		return rf(ctx, userId, bookId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) domain.BorrowingRecord); ok {
		r0 = rf(ctx, userId, bookId, status)
	} else {
		r0 = ret.Get(0).(domain.BorrowingRecord)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, string) error); ok {
		r1 = rf(ctx, userId, bookId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBorrowedRecord provides a mock function with given fields: ctx
func (_m *BorrowingRecordUsecase) GetAllBorrowedRecord(ctx context.Context) ([]domain.BorrowingRecord, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBorrowedRecord")
	}

	var r0 []domain.BorrowingRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.BorrowingRecord, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.BorrowingRecord); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BorrowingRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBorrowingRecordUsecase creates a new instance of BorrowingRecordUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBorrowingRecordUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *BorrowingRecordUsecase {
	mock := &BorrowingRecordUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
